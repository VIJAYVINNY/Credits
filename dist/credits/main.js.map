{"version":3,"sources":["./src/app/authorize/authorize.component.ts","./src/app/authorize/authorize.component.html","./src/app/methods/methods.component.ts","./src/app/methods/methods.component.html","./src/app/chandru/chandru.module.ts","./src/app/user.ts","./src/app/offline/offline.component.ts","./src/app/offline/offline.component.html","./src/environments/environment.ts","./src/app/allinone/allinone.module.ts","./src/app/arcreact/arcreact.module.ts","./src/app/dialog/dialog.module.ts","./src/app/chandru/chandru.component.ts","./src/app/chandru/chandru.component.html","./src/app/allinone/allinone.component.ts","./src/app/allinone/allinone.component.html","./src/app/todo/todo.component.ts","./src/app/todo/todo.component.html","./src/services/allservice.service.ts","./src/app/reactiveform/reactiveform.component.ts","./src/app/reactiveform/reactiveform.component.html","./src/app/materials/materials.component.ts","./src/app/materials/materials.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/corporate/corporate.module.ts","./src/app/implementing/implementing.component.ts","./src/app/implementing/implementing.component.html","./src/app/login/login.module.ts","./src/app/app.module.ts","./src/app/dialog/dialog.component.ts","./src/app/dialog/dialog.component.html","./src/services/enrollment.service.ts","./src/app/materials/materials.module.ts","./src/app/offline/offline.module.ts","./src/app/arcreact/arcreact.component.ts","./src/app/list-employee/list-employee.component.ts","./src/services/methods.service.ts","./src/app/contacts/contacts.component.ts","./src/app/contacts/contacts.component.html","./src/services/contacts.service.ts","./src/app/corporate/corporate.component.ts","./src/app/corporate/corporate.component.html","./src/app/pagenotfound/pagenotfound.component.ts","./src/app/pagenotfound/pagenotfound.component.html","./src/app/template/template.component.ts","./src/app/template/template.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MethodsService } from 'src/services/methods.service';\r\n\r\n@Component({\r\n  selector: 'app-authorize',\r\n  templateUrl: './authorize.component.html',\r\n  styleUrls: ['./authorize.component.scss']\r\n})\r\nexport class AuthorizeComponent implements OnInit {\r\n\r\n  contactList: any\r\n\r\n\r\n  constructor(private methodService: MethodsService) {\r\n\r\n    this.methodService.getContacts().subscribe((data: any) => {\r\n      this.contactList = data;\r\n      // console.log(\"The required output is:\",data);  \r\n    });\r\n  }\r\n\r\n  getPostData(data: any)\r\n  {\r\n    console.log(data);\r\n    this.methodService.postDetails(data).subscribe((data)=>{\r\n      console.log(data);\r\n    })\r\n  }\r\n  /**PUT Method Calling */\r\n\r\n  // updateDetails(detailsId){\r\n  //   const newFormData={id:detailsId,FirstName:'Steve',position:'SQL Developer'};\r\n  // }\r\n\r\n  ngOnInit(): void { }\r\n\r\n\r\n}\r\n\r\n\r\n","<h2> working on HttpMethods through API Url</h2><br>\r\n\r\n<ul>\r\n    <li *ngFor=\" let contact of contactList \">\r\n        {{contact.FirstName}}\r\n    </li>\r\n</ul><br><br>\r\n<hr>\r\n\r\n<form #userForm=\"ngForm\" (ngSubmit)=\"getPostData(userForm.value)\">\r\n    <input type=\"text\" name=\"FirstName\" placeholder=\"Enter your FirstName\" ngModel><br><br>\r\n    <input type=\"text\" name=\"position\" placeholder=\" Enter your position \" ngModel><br><br>\r\n    <button>Submit</button>\r\n</form>\r\n\r\n<div>\r\n    <nav class=\"navbar navbar-expand-lg bg-light\">\r\n        <div class=\"container-fluid\">\r\n            <a class=\"navbar-brand\" href=\"#\">Navbar</a>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Link</a>\r\n                    </li>\r\n                    <li class=\"nav-item dropdown\">\r\n                        <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Dropdown</a>\r\n                        <ul class=\"dropdown-menu\">\r\n                            <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\r\n                            <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n                            <li>\r\n                                <hr class=\"dropdown-divider\">\r\n                            </li>\r\n                            <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n                        </ul>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link disabled\">Disabled</a>\r\n                    </li>\r\n                </ul>\r\n                <form class=\"d-flex\" role=\"search\">\r\n                    <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\r\n                    <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n</div>\r\n\r\n<!-- <button (click)=\"allservicesService.() \">The list of contacts are:</button> -->","import { Component, OnInit } from '@angular/core';\r\nimport { AllserviceService } from 'src/services/allservice.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-methods',\r\n  templateUrl: './methods.component.html',\r\n  styleUrls: ['./methods.component.scss']\r\n})\r\nexport class MethodsComponent implements OnInit {\r\ndataSubmit(arg0: any) {\r\nthrow new Error('Method not implemented.');\r\n}\r\n\r\n  constructor(private allService:AllserviceService) { }\r\n\r\n  ngOnInit(): void {\r\n    // this.allService.getMethods().subscribe(data=>{\r\n    //   this.contactLinst=data;\r\n    //   console.log(data);\r\n\r\n    // })\r\n  }\r\n  getPostData(data:any){\r\n  //   postCall(){\r\n\r\n  //     this.allService.postCall().subscribe(result=>{\r\n  //         console.log();\r\n  //     })\r\n  //  }\r\n  }\r\n\r\n}\r\n","<!-- <div class=\"container\">\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-6\">\r\n            <form #userform=\"ngForm\" (ngSubmit)=\"dataSubmit(userform.value)\">\r\n                <fieldset>\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"u_name\" class=\"form-label\">Username</label>\r\n                        <input type=\"text\" id=\"u_name\" class=\"form-control\" required ngModel>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"u_password\" class=\"form-label\">Password</label>\r\n                        <input type=\"text\" id=\"u_password\" class=\"form-control\" ngModel required>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckIndeterminate\">\r\n                            <label class=\"form-check-label\" for=\"flexCheckIndeterminate\">\r\n                              Indeterminate checkbox\r\n                          </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3 normal\">\r\n                        <label for=\"u_comments\" class=\"form-label1\">Comments in normal textbox:</label>\r\n                        <textarea id=\"u_comment\" class=\"form-control\" rows=\"5\" value=\"type here\"></textarea>\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"u_comments3\" class=\"form-label2\">Comments in medium textbox:</label>\r\n                        <textarea id=\"u_comment\" class=\"form-control form-control-md\" rows=\"5\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"u_comments1\" class=\"form-label3\">Comments in Large textbox:</label>\r\n                        <textarea id=\"u_comment\" class=\"form-control form-control-lg\" rows=\"5\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"u_comments2\" class=\"form-label4\">Comments in small textbox:</label>\r\n                        <textarea id=\"u_comment\" class=\"form-control form-control-sm\" rows=\"5\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"Email\" class=\"form-label5\">Email:</label>\r\n                        <input type=\"email\" id=\"email\" class=\"form-control form-control-sm\" placeholder=\"Enter your mail\" required>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"file\" class=\"form-label6\">File:</label>\r\n                        <input type=\"file\" id=\"file\" class=\"form-control form-control-sm\" type=\"file\" required>\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"color\" class=\"form-label6\">File:</label>\r\n                        <input type=\"color\" id=\"file\" class=\"form-control-sm form-control-color\">\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"color\" class=\"form-label6\">File:</label>\r\n                        <input type=\"color\" id=\"file\" class=\"form-control-sm form-control-color\" disabled>\r\n                    </div>\r\n\r\n                    <button class=\"btn btn-success\" type=\"submit\">Submit</button>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n\r\n\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"myDatePicker\">\r\n  <mat-datepicker-toggle [for]=\"myDatePicker\">matSuffix</mat-datepicker-toggle>\r\n  <mat-datepicker #myDatePicker></mat-datepicker>\r\n</mat-form-field>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChandruComponent } from './chandru.component';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ChandruComponent],\r\n  \r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule\r\n  ]\r\n})\r\nexport class ChandruModule { }\r\n","export class User {\r\n  constructor(\r\n    public name:string,\r\n    public email:string,\r\n    public phone:number,\r\n    public topic:string,\r\n    public timepreference:string,\r\n    public subscribe:boolean\r\n  ) { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {MatDialog, MAT_DIALOG_DATA} from '@angular/material/dialog'\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-offline',\r\n  templateUrl: './offline.component.html',\r\n  styleUrls: ['./offline.component.scss']\r\n})\r\nexport class OfflineComponent implements OnInit {\r\n\r\n  constructor(private dialog:MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  openDialog() {\r\n    this.dialog.open(DialogComponent, {\r\n\r\n    });\r\n}\r\n}\r\n","<div>  <mat-toolbar style=\"color: rgb(42, 219, 45);\">\r\n    <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\r\n      <mat-icon>card_travel</mat-icon>\r\n    </button>\r\n    <span>Working with Material_UI</span>\r\n    <span class=\"example-spacer\"></span>\r\n    <button mat-button color=\"primary\" (click)=\"openDialog()\">Add Product</button>\r\n      <mat-icon>share</mat-icon>\r\n  </mat-toolbar>\r\n</div>\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ListEmployeeComponent } from '../list-employee/list-employee.component';\r\nimport { ImplementingComponent } from '../implementing/implementing.component';\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { MethodsComponent } from '../methods/methods.component';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport { AllinoneComponent } from './allinone.component';\r\n\r\n\r\n@NgModule({\r\n\r\n  declarations: [\r\n    ListEmployeeComponent,\r\n    ImplementingComponent,\r\n    LoginComponent,\r\n    MethodsComponent,\r\n    AllinoneComponent],\r\n\r\n\r\n  imports: [\r\n    CommonModule,MatCheckboxModule,\r\n    MatRadioModule,MatToolbarModule,\r\n    MatListModule,MatIconModule,MatFormFieldModule,\r\n    MatSelectModule,MatGridListModule,\r\n    MatDatepickerModule,MatNativeDateModule,\r\n    MatTooltipModule\r\n  ]\r\n})\r\nexport class AllinoneModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ArcreactComponent } from './arcreact.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ArcreactComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ArcreactModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DialogComponent } from './dialog.component';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatButtonModule} from '@angular/material/button';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DialogComponent],\r\n  imports: [\r\n    CommonModule,MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    FormsModule,MatDatepickerModule,\r\n    MatNativeDateModule,MatRadioModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class DialogModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MethodsService } from 'src/services/methods.service';\r\nimport{HttpClient,HttpHeaders,HttpParams} from '@angular/common/http';\r\n\r\n\r\n@Component({\r\n  selector: 'app-chandru',\r\n  templateUrl: './chandru.component.html',\r\n  styleUrls: ['./chandru.component.scss']\r\n})\r\nexport class ChandruComponent implements OnInit {\r\n\r\n  constructor(public methodsService:MethodsService) { }\r\n\r\n  contactList:any;\r\n  ngOnInit(): void {\r\n\r\n    this.methodsService.getContacts().subscribe(data=>{\r\n     this.contactList=data;\r\n    })\r\n  }\r\n\r\n}\r\n","<p>The List of values are With Http Methods are:</p>\r\n\r\n\r\n<ul>\r\n    <table>\r\n        <tr>\r\n             <th>Firstname</th>\r\n        </tr>\r\n    </table>\r\n    <li *ngFor=\"let contact of contactList\">\r\n        {{contact.Firstname}}\r\n    </li>\r\n</ul>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-allinone',\r\n  templateUrl: './allinone.component.html',\r\n  styleUrls: ['./allinone.component.scss']\r\n})\r\nexport class AllinoneComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>allinone works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-todo',\r\n  templateUrl: './todo.component.html',\r\n  styleUrls: ['./todo.component.scss']\r\n})\r\nexport class TodoComponent implements OnInit {\r\n  // registrationForm:FormGroup;\r\n  constructor(){}\r\n\r\n\r\n\r\n  registrationForm=new FormGroup({\r\n    userName:new FormControl(''),\r\n    password:new FormControl(''),\r\n    confirmPassword:new FormControl(''),\r\n\r\n    address:new FormGroup({\r\n      city:new FormControl(''),\r\n      state:new FormControl(''),\r\n      postalNo:new FormControl(''),\r\n    })\r\n  });\r\n\r\naddress: any;\r\ncontactList:any;\r\n\r\n  ngOnInit(): void {\r\n\r\n   }\r\n// //With help of patchvalue we will get required data(Optional)\r\n  // loadApiData(){\r\n  //   this.registrationForm.patchValue({\r\n  //     userName:\"vijay\",\r\n  //     password:\"Vijay1021@\",\r\n  //     confirmPassword:\"Vijay1021@\",\r\n  //     // address:{\r\n  //     //   city:\"Kalluru\",\r\n  //     //   state:\"Telangana\",\r\n  //     //   postalNo:507209\r\n  //     // }\r\n  //   })\r\n  //     }\r\n\r\n\r\n      loadApiData(){\r\n        this.registrationForm.setValue({\r\n          userName:\"vijay\",\r\n          password:\"Vijay1021@\",\r\n          confirmPassword:\"Vijay1021@\",\r\n          address:{\r\n            city:\"Kalluru\",\r\n            state:\"Telangana\",\r\n            postalNo:507209\r\n          }\r\n        })\r\n          }\r\n}\r\n","<!-- <ul>\r\n    <li *ngFor=\"let contact of contactList\">\r\n        {{contact.contactName}}\r\n    </li>\r\n</ul> -->\r\n<mat-button-toggle-group #toggleGroup=\"matButtonToggleGroup\" single=\"\">\r\n  <mat-button-toggle value=\"C#\">C#</mat-button-toggle>\r\n  <mat-button-toggle value=\"JAVA\">JAVA</mat-button-toggle>\r\n  <mat-button-toggle value=\"SQL\">SQL</mat-button-toggle>\r\n\r\n</mat-button-toggle-group>  {{toggleGroup.value}}\r\n\r\n<div class=\"container\">\r\n    <div class=\"container-fluid\">\r\n        <h2>Registration-Form</h2>\r\n\r\n        <form [formGroup]=\"registrationForm\">\r\n\r\n            <div class=\"form-group\">\r\n                <label>UserName:</label> <input formControlName=\"userName\" type=\"text\" class=\"form-control\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Password</label>\r\n                <input formControlName=\"password\" type=\"password\" class=\"form-control\">\r\n\r\n                <div class=\"form-group\">\r\n                    <label>Confirmpassword</label>\r\n                    <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\">\r\n                    <br>\r\n                    <button type=\"button\" class=\"btn btn-primary\">Register</button>&nbsp;\r\n                    <button type=\"button\" class=\"btn btn-secondary\" ml-2 type=\"submit\" (click)=\"loadApiData()\">LodaData</button>\r\n                </div>\r\n                <div [formGroupName]=\"address\">\r\n                    <div class=\"form-group\">\r\n                        <label>City:</label>\r\n                        <input type=\"text\" formControlName=\"city\" class=\"form-control\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label>State:</label>\r\n                        <input type=\"text\" formControlName=\"state\" class=\"form-control\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label>Postal No:</label>\r\n                        <input type=\"number\" class=\"form-control\" formControlName=\"postalNo\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n<hr>\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AllserviceService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { User } from '../user';\r\nimport { EnrollmentService } from 'src/services/enrollment.service';\r\n\r\n@Component({\r\n  selector: 'app-reactiveform',\r\n  templateUrl: './reactiveform.component.html',\r\n  styleUrls: ['./reactiveform.component.scss'],\r\n})\r\nexport class ReactiveformComponent implements OnInit {\r\n  notifivation=4\r\n\r\n  // subjects=['C#','ASP','JAVA','SQL','MongoDB','ASP.NET TUTORIALS','qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',\"sdfsdsdgdgggasdgdsgsgsdgsdgsdgsdgsdggasdgsdgtwetaeratqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqdhdfh\"];\r\n\r\n  subjects = ['C#', 'ASP', 'JAVA', 'SQL', 'MongoDB'];\r\n\r\n  userModel = new User('vijay', 'vijay111.gummadi@gmail.com', 9603722638, 'default', 'morning', true);\r\n\r\n  constructor(private enrollmentService: EnrollmentService) {}\r\n\r\n  topicHasError = true;\r\n  submitted=false;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  validateTopic(value: string) {\r\n    if (value === 'default') {\r\n      this.topicHasError = true;\r\n    } else {\r\n      this.topicHasError = false;\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n\r\n\r\nthis.submitted=true;\r\n    this.enrollmentService.enroll(this.userModel).subscribe(\r\n     (data) => console.log('Success!', data),\r\n     (error) => console.log('Error!', error)\r\n    );\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n\r\n    <form #userForm=\"ngForm\" (ngSubmit)=\"onSubmit()\" novalidate *ngIf=\"!submitted\">\r\n        {{userForm.form.valid}}\r\n<div class=\"form-group\">\r\n    <label>Name:</label>\r\n    <input type=\"text\" name=\"userName\" class=\"form-control\" required #name=\"ngModel\" [class.is-invalid]=\"name.invalid && name.touched\" [(ngModel)]=\"userModel.name\">\r\n    <small class=\"text-danger\" [class.d-none]=\"name.valid||name.untouched\">Name is Required</small>\r\n</div><br>\r\n\r\n<div class=\"form-group\">\r\n    <label>Email:</label>\r\n    <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"userModel.email \">\r\n</div><br>\r\n\r\n<div class=\"form-group\">\r\n    <label>Phone:</label>\r\n    <input type=\"tel\" class=\"form-control\" name=\"phone\" #phone=\"ngModel\" pattern=\"^\\d{10}$\" [class.is-invalid]=\"phone.invalid && phone.touched\" required [(ngModel)]=\"userModel.phone\">\r\n    <small class=\"text-danger\" [class.d-none]=\"phone.valid||phone.untouched\">Phone Number required and must be 10 Digits</small>\r\n<div *ngIf=\"phone.errors&&(phone.invalid&&phone.touched)\">\r\n    <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Phone number is required</small>\r\n    <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Pattern must be 10 digits</small>\r\n</div>\r\n</div><br>\r\n\r\n<div class=\" form-group\">\r\n    <select (blur)=\"validateTopic(topic.value)\" (change)=\"validateTopic(topic.value)\" class=\"custom-select\" name=\"topic\" #topic=\"ngModel\" [class.is-invalid]=\"topic.invalid&&topic.touched\" [(ngModel)]=\"userModel.topic\">\r\n                <option value=\"default\">I'm Interested in</option>\r\n                <option *ngFor=\"let sub of subjects\">{{sub}}</option>\r\n                </select>\r\n    <small class=\"text-danger\" [class.d-none]=\"!topicHasError||topic.untouched\">Please choose one topic</small>\r\n</div><br>\r\n\r\n<div class=\"mb-3\">\r\n    <label>Time Preference</label>\r\n    <div class=\"form-check\">\r\n        <input type=\"radio\" class=\"form-check-input\" name=\"timePreference\" value=\"morning\" [(ngModel)]=\"userModel.timepreference\">\r\n        <label class=\"form-check-label\">Morning(9AM-12PM)</label>\r\n    </div>\r\n\r\n    <div class=\"form-check\">\r\n        <input type=\"radio\" class=\"form-check-input\" name=\"timePreference\" value=\"evening\" [(ngModel)]=\"userModel.timepreference\">\r\n        <label class=\"form-check-label\">Evening(4PM-8PM)</label>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"form-check mb-3 \">\r\n    <input class=\"form-check-input\" type=\"checkbox\" name=\"subscribe\" [(ngModel)]=\"userModel.subscribe\">\r\n    <label class=\"form-check-label\" for=\"flexCheckDefault\"> Proposal Offers:</label>\r\n</div>\r\n<button [disabled]=\"userForm.form.invalid||topicHasError\" type=\"button\" class=\"btn btn-primary\">SubmitForm</button>\r\n\r\n<hr />\r\n</form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-materials',\r\n  templateUrl: './materials.component.html',\r\n  styleUrls: ['./materials.component.scss']\r\n})\r\nexport class MaterialsComponent implements OnInit {\r\n\r\n  notifivation = 6;\r\n\r\n  color: ThemePalette = 'primary';\r\n  value = 50;\r\n\r\n  constructor() { }\r\n  hidden = false;\r\n\r\n  toggleBadgeVisibility() {\r\n    this.hidden = !this.hidden;\r\n  }\r\n\r\n  showSpinner = false;\r\n\r\n  showData() {\r\n    this.showSpinner = true;\r\n    setTimeout(() => {\r\n      this.showSpinner = false;\r\n    }, 4000)\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!-- <div>\r\n    &nbsp;\r\n    <mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\" #togglebtn>\r\n        <mat-button-toggle value=\"bold\">Bold</mat-button-toggle>\r\n        <mat-button-toggle value=\"italic\">Italic</mat-button-toggle>\r\n        <mat-button-toggle value=\"underline\">Underline</mat-button-toggle>\r\n    </mat-button-toggle-group>\r\n</div> -->\r\n\r\n<!-- <div>&nbsp;\r\n    <mat-icon>Redo</mat-icon>\r\n    <mat-icon>Select All</mat-icon>\r\n    <mat-icon>Download Done</mat-icon>\r\n</div> -->\r\n\r\n<hr><br>\r\n<div>\r\n    <div matBadge=\"4\">Text with a badge</div>\r\n\r\n    <div matBadge=\"1\" matBadgeSize=\"medium\" class=\"demo-section\">Text with large badge</div>\r\n\r\n    <div class=\"demo-section\">\r\n        Button with a badge on the left\r\n        <button mat-raised-buttoncolor=\"primary\" matBadge=\"8\" matBadgePosition=\"before\" matBadgeColor=\"accent\">\r\n    Action\r\n  </button>\r\n    </div>\r\n\r\n    <div class=\"demo-section\">\r\n        Button toggles badge visibility\r\n        <button mat-raised-button matBadge=\"7\" [matBadgeHidden]=\"hidden\" (click)=\"toggleBadgeVisibility()\">\r\n        Hide\r\n    </button>\r\n    </div>\r\n\r\n    <div class=\"demo-section\">\r\n        Icon with a badge\r\n        <mat-icon matBadge=\"15\" matBadgeColor=\"warn\">home</mat-icon> -->\r\n\r\n        <!-- Include text description of the icon's meaning for screen-readers -->\r\n\r\n        <span class=\"cdk-visually-hidden\">\r\n      Example with a home icon with overlaid badge showing the number 15\r\n    </span>\r\n        <div>\r\n            &nbsp; &nbsp; &nbsp;<span matBadgePosition=\"below before\">UnreadMessage</span>\r\n        </div>&nbsp;\r\n\r\n        <div>\r\n            <span matBadge=\"4\" matBadgeColor=\"warn\" matBadgePosition=\"below after\">UnreadMessage</span>\r\n        </div>&nbsp;\r\n        <div>\r\n            <span matBadge=\"4\" matBadgeColor=\"primary\">UnreadMessage</span>\r\n        </div>&nbsp;\r\n\r\n        <div>\r\n            <span matBadge=\"4\" matBadgeColor=\"warn\" matBadgePosition=\"above\">UnreadMessage</span>\r\n        </div>&nbsp;\r\n        <div>\r\n            <span matBadge=\"4\" [matBadge]=\"notifivation\" matBadgePosition=\"above after\">UnreadMessage</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!--\r\n<div>\r\n    <mat-progress-spinner value=\"20\"></mat-progress-spinner>\r\n</div> -->\r\n\r\n<div>\r\n    <mat-spinner *ngIf=\"showSpinner\" color=\"warn\"></mat-spinner>\r\n    <button (click)=\"showData()\" class=\"btn btn-primary\">ShowData</button>\r\n</div>\r\n<!--\r\n<mat-card class=\"example-card\">\r\n    <mat-card-content>\r\n        <h2 class=\"example-h2\">Progress spinner configuration</h2>\r\n\r\n        <section class=\"example-section\">\r\n            <label class=\"example-margin\">Color:</label>\r\n            <mat-radio-group color=\"accent\">\r\n                <mat-radio-button class=\"example-margin\" value=\"primary\">Primary</mat-radio-button>\r\n                <mat-radio-button class=\"example-margin\" value=\"accent\"> Accent</mat-radio-button>\r\n                <mat-radio-button class=\"example-margin\" value=\"warn\">Warn</mat-radio-button>\r\n            </mat-radio-group>\r\n        </section>\r\n\r\n        <section class=\"example-section\">\r\n            <label class=\"example-margin\">Mode:</label>\r\n            <mat-radio-group color=\"accent\">\r\n                <mat-radio-button class=\"example-margin\" value=\"determinate\">\r\n                    Determinate\r\n                </mat-radio-button>\r\n                <mat-radio-button class=\"example-margin\" value=\"indeterminate\">\r\n                    Indeterminate\r\n                </mat-radio-button>\r\n            </mat-radio-group>\r\n        </section>\r\n\r\n        <section class=\"example-section\" *ngIf=\"mode === 'determinate'\">\r\n            <label class=\"example-margin\">Progress:</label>\r\n            <mat-slider class=\"example-margin\" color=\"primary\">\r\n                <input type=\"range\" matSliderThumb></mat-slider>\r\n        </section>\r\n    </mat-card-content>\r\n</mat-card> -->\r\n","import { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  // title = 'credits';\r\n\r\n  // value(id:number)\r\n  // {\r\n  //   alert('we are working on events:' + id);\r\n  // }\r\n\r\n  // username='';\r\n\r\n\r\n}\r\n","\r\n    <!-- We Are Learning\r\n<p>Present we are working on Routing Module</p> -->\r\n<!-- <button>Success</button> -->\r\n<!-- <button (click)=\"value(11)\">Submit</button><hr> -->\r\n\r\n<!-- Two Way DataBinding -->\r\n\r\n<!-- <input type=\"text\" [(ngModel)]=\"username\" />\r\n<p>{{username}}</p><hr> -->\r\n\r\n<!-- Calling all the components through the links  -->\r\n\r\n\r\n\r\n    <!-- <p>routing normal way</p>\r\n    <ul>\r\n        <li><a href=\"authorize\">Authorize</a></li>\r\n        <li><a href=\"chandru\">Chandru</a></li>\r\n        <li><a href=\"corporate\">Corporate</a></li>\r\n        <li><a href=\"login\">LogIn</a></li>\r\n        <li><a href=\"contacts\">Contacts</a></li>\r\n    </ul> -->\r\n\r\n\r\n\r\n<p>Routing in Angular way</p>\r\n<div>\r\n    <ul>\r\n      <!-- <li><a routerLink=\"/Reactiveform\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">ReactiveForm</a></li>\r\n      <li><a routerLink=\"/todo\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">TodoForm</a></li>\r\n      <li><a routerLink=\"/listemployee\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Listemployee</a></li>\r\n      <li><a routerLink=\"/login\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">LogIn</a></li>\r\n      <li><a routerLink=\"/pagenotfound\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">PageNotFound</a></li>\r\n      <li><a routerLink=\"/method\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">methods</a></li>-->\r\n      <!-- <li><a routerLink=\"/chandru\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">chandru</a></li>-->\r\n      <!-- <li><a routerLink=\"/corporate\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">corporate</a></li> -->\r\n    </ul>\r\n</div>\r\n\r\n\r\n<router-outlet> </router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CorporateComponent } from './corporate.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CorporateComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatGridListModule,FormsModule,\r\n    MatSelectModule,MatCheckboxModule,\r\n    ReactiveFormsModule,MatAutocompleteModule,\r\n    MatRadioModule,MatDatepickerModule,MatNativeDateModule,\r\n    MatTooltipModule,MatSnackBarModule\r\n  ]\r\n})\r\nexport class CorporateModule { }\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-implementing',\r\n  templateUrl: './implementing.component.html',\r\n  styleUrls: ['./implementing.component.scss']\r\n})\r\nexport class ImplementingComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<mat-checkbox>\r\n  subscribe\r\n</mat-checkbox><br/>\r\n\r\n<mat-checkbox labelPosition=\"before\">\r\n  subscribe\r\n</mat-checkbox><br/>\r\n\r\n<!-- <mat-checkbox style=\"color: black;\"> -->\r\n  <mat-checkbox color=\"primary\">\r\n  subscribe\r\n</mat-checkbox>\r\n<mat-checkbox color=\"accent\">\r\n  subscribe\r\n</mat-checkbox>\r\n\r\n<hr>\r\n<mat-radio-group >\r\n  <mat-radio-button value=\"fronted\" color=\"warn\">FrontEnd</mat-radio-button>\r\n  <mat-radio-button value=\"backend\" color=\"primary\">BackEnd</mat-radio-button>\r\n  <mat-radio-button value=\"weekend\" color=\"accent\">WeekEnd</mat-radio-button>\r\n</mat-radio-group><br>\r\n<div>\r\n<mat-radio-button value=\"fronted\">FrontEnd</mat-radio-button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n   CommonModule,MatMenuModule,\r\n\r\n\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport { ContactsComponent } from './contacts/contacts.component';\r\nimport { TodoComponent } from './todo/todo.component';\r\nimport { PagenotfoundComponent } from './pagenotfound/pagenotfound.component';\r\nimport { AuthorizeComponent } from './authorize/authorize.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveformComponent } from './reactiveform/reactiveform.component';\r\nimport { TemplateComponent } from './template/template.component';\r\nimport { MaterialsComponent } from './materials/materials.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {ArcreactModule } from './arcreact/arcreact.module';\r\nimport {ChandruModule } from './chandru/chandru.module';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {LoginModule } from './login/login.module';\r\nimport {CorporateModule } from './corporate/corporate.module';\r\nimport {AllinoneModule } from './allinone/allinone.module';\r\nimport { OfflineModule } from './offline/offline.module';\r\nimport { DialogModule } from './dialog/dialog.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ContactsComponent,\r\n    TodoComponent,\r\n    PagenotfoundComponent,\r\n    AuthorizeComponent,\r\n    ReactiveformComponent,\r\n    TemplateComponent,\r\n    MaterialsComponent,\r\n\r\n    ],\r\n\r\n\r\n  imports:\r\n   [AppRoutingModule,\r\n    ArcreactModule,\r\n    FormsModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    DialogModule,\r\n    BrowserModule,\r\n    MatProgressSpinnerModule,\r\n    MatCardModule,\r\n    MatTooltipModule,\r\n    HttpClientModule,\r\n    MatRadioModule,\r\n    BrowserAnimationsModule,\r\n    MatSliderModule,\r\n    ReactiveFormsModule,\r\n    MatToolbarModule,\r\n    MatTabsModule,\r\n    MatSidenavModule,\r\n    MatMenuModule,\r\n    ArcreactModule,\r\n    ChandruModule,\r\n    MatListModule,\r\n    LoginModule,\r\n    CorporateModule,\r\n    AllinoneModule,\r\n    OfflineModule\r\n  ],\r\n\r\n  providers: [],\r\n\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Vehicles } from './dialog.model';\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  vehicles: Vehicles[] = [\r\n    {value: 'TATA', viewValue: 'TATA'},\r\n    {value: 'MARUTI', viewValue: 'MARUTI'},\r\n    {value: 'VOLKSWAGNOR', viewValue: 'WAGNOR'},\r\n  ];\r\n  myFilter = (d: Date | null): boolean => {\r\n    const day = (d || new Date()).getDay();\r\n    // Prevent Saturday and Sunday from being selected.\r\n    return day !== 0 && day !== 6;\r\n  };\r\n\r\n  quality=[\"Below\",\"Average\",\"Medium\",\"Good\"];\r\n\r\n  }\r\n\r\n\r\n\r\n","  <!-- <p>Congratulations You are Successfully working on pagenation</p> -->\r\n<h1 mat-dialog-title>Add Product Data</h1>&nbsp;\r\n\r\n<div mat-dialog-content>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n      <mat-label>Product_Name</mat-label>\r\n      <input matInput placeholder=\"placeholder\">\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n  <mat-label>List Of Vehicles</mat-label>\r\n<mat-select placeholder=\"category\">\r\n  <mat-option *ngFor=\"let v of vehicles\" [value]=\"v.value\">\r\n    {{v.viewValue}}\r\n  </mat-option>\r\n</mat-select>\r\n</mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Choose a date</mat-label>\r\n    <input matInput [matDatepicker]=\"picker\">\r\n    <mat-hint>MM/DD/YYYY</mat-hint>\r\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n    <mat-datepicker #picker></mat-datepicker>\r\n  </mat-form-field>\r\n\r\n\r\n  <label for=\"\"><h2>Quality:</h2></label>\r\n  <mat-radio-group  aria-labelledby=\"example-radio-group-label\"\r\n  class=\"example-radio-group\">\r\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let q of quality\" [value]=\"q\">\r\n{{q}}\r\n    </mat-radio-button>\r\n  </mat-radio-group>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Price</mat-label>\r\n    <input matInput type=\"number\" placeholder=\"price\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\">\r\n  <mat-label>Comments</mat-label>\r\n  <textarea matInput></textarea>\r\n</mat-form-field>\r\n\r\n<div [align]=\"'end'\">\r\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>&nbsp;\r\n  <button mat-raised-button color=\"accent\">Save</button>\r\n</div>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from 'src/app/user';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnrollmentService {\r\n  _url='http://localhost:3000/details';\r\n  constructor(private _http:HttpClient) { }\r\nenroll(user:User){\r\n return this._http.post(this._url,user)\r\n}\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n\r\n  imports: [\r\n    CommonModule,\r\n\r\n  ],\r\n  exports:[]\r\n})\r\nexport class MaterialsModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OfflineComponent } from './offline.component';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\n\r\n\r\n@NgModule({\r\n  declarations: [OfflineComponent],\r\n  imports: [\r\n    CommonModule,MatToolbarModule,\r\n    MatIconModule,MatButtonModule,\r\n    MatDialogModule,MatFormFieldModule\r\n  ]\r\n})\r\nexport class OfflineModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-arcreact',\r\n  templateUrl: './arcreact.component.html',\r\n  styleUrls: ['./arcreact.component.scss']\r\n})\r\nexport class ArcreactComponent implements OnInit {\r\n\r\n\r\n  loanInfoForm!: FormGroup;\r\n  constructor(public fb: FormBuilder ) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // this.loanInfoForm=new FormGroup({\r\n    //   'loanName':new FormControl(),\r\n    //   'loanType':new FormControl()\r\n\r\n    // })\r\n\r\n    this.loanInfoForm = this.fb.group({\r\n      'loanName': new FormControl('',Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(7),\r\n      Validators.maxLength(15)\r\n    ])),\r\n      'loanType': new FormControl(),\r\n      'description': new FormControl()\r\n    })\r\n\r\n\r\n    // //// Adding Values directly into the form\r\n    // const addingValues = {\r\n    //   'loanName': 'House Loan',\r\n    //   'loanType': 'monthly loan',\r\n    //   'description': 'I want to build a  home'\r\n    // }\r\n    // this.loanInfoForm.setValue(addingValues);    ////With set values we need to give all the values mandatory\r\n\r\n\r\n    // const addingValues = {\r\n    //   'loanName': 'House Loan',\r\n    //   'loanType': 'monthly loan',\r\n    // //   'description': 'I want to build a  home'\r\n    // }\r\n\r\n    // this.loanInfoForm.patchValue(addingValues);  ////  With Patchvalues setting the values are optional\r\n\r\n\r\n    // this.loanInfoForm.valueChanges.subscribe(data=>{\r\n    //   console.log(data);\r\n    // })\r\n  }\r\n\r\n\r\n  submitData() {\r\n    console.log(this.loanInfoForm.value);\r\n\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Employee } from './models/employee.model';\r\nimport {FormControl} from '@angular/forms';\r\nimport {TooltipPosition} from '@angular/material/tooltip';\r\n\r\n@Component({\r\n  selector: 'app-list-employee',\r\n  templateUrl: './list-employee.component.html',\r\n  styleUrls: ['./list-employee.component.scss']\r\n})\r\nexport class ListEmployeeComponent implements OnInit {\r\n  positionOptions: TooltipPosition[] = ['below', 'above', 'left', 'right'];\r\n  position = new FormControl(this.positionOptions[0]);\r\n\r\n  value = 'Clear me';\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  Pagetitle: string = \"OPTEVUS Employee  Details\";\r\n  showImages: boolean = false;\r\n  listFilter: string = \"\";\r\n  toggleImage() {\r\n    this.showImages = !this.showImages;\r\n  }\r\n\r\n  // employees: Employee[] = [\r\n  //   {\r\n  //     id: 1234,\r\n  //     name: \"Vijaya Rani\",\r\n  //     gender: 'Female',\r\n  //     contactPreference: 'Email',\r\n  //     email: 'vijayarani@softpath.net',\r\n  //     phoneNumber: 9652733447,\r\n  //     // DOB:new Date(10/25/1988) ,\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: \"Team Lead\",\r\n  //     // isActive: true,\r\n  //     imageUrl: \"assets/images/mary.png\",\r\n  //     package: '15LPA',\r\n  //   },\r\n  //   {\r\n  //     id: 1235,\r\n  //     name: \"Greesh Kapila\",\r\n  //     gender: 'Male',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"Gireeshkapila@softpath.net\",\r\n  //     phoneNumber: 9652733554,\r\n  //     // DOB:new Date(11/20/1979) ,\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Senior Architect',\r\n  //     // isActive: true,\r\n  //     imageUrl: \"assets/images/john.png\",\r\n  //     package: \"15LPA\",\r\n  //   },\r\n  //   {\r\n  //     id: 1236,\r\n  //     name: \"Praveen Peddinti\",\r\n  //     gender: 'Male',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"praveenpeddinti@softpath.net\",\r\n  //     phoneNumber: 9658473281,\r\n  //     // DOB: new Date(3/25/1976),\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Team Lead',\r\n  //     // isActive: false,\r\n  //     imageUrl: \"assets/images/john.png\",\r\n  //     package: '15LPA',\r\n  //   },\r\n  //   {\r\n  //     id: 1237,\r\n  //     name: \"Sandeep Kumar\",\r\n  //     gender: 'Male',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"sandeepkumar.g@softpath.net\",\r\n  //     phoneNumber: 6589741355,\r\n  //     // DOB: new Date(3/25/1976),\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Associate Director',\r\n  //     // isActive: false,\r\n  //     imageUrl: \"assets/images/mark.png\",\r\n  //     package: '15LPA,'\r\n  //   },\r\n  //   {\r\n  //     id: 1237,\r\n  //     name: \"Harish Kumar\",\r\n  //     gender: 'Male',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"harishkumar.b@softpath.net\",\r\n  //     phoneNumber: 6984759135,\r\n  //     // DOB: new Date(3/25/1976),\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Sr.Associate Director',\r\n  //     // isActive: false,\r\n  //     imageUrl: \"assets/images/mark.png\",\r\n  //     package: '15LPA',\r\n  //   },\r\n  //   {\r\n  //     id: 1238,\r\n  //     name: \"Pavan Kalyan Chillapalli\",\r\n  //     gender: 'Male',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"pavankalyan.ch@softpath.net\",\r\n  //     phoneNumber: 9587462358,\r\n  //     // DOB: new Date(3/25/1976),\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Full Stack Developer',\r\n  //     // isActive: false,\r\n  //     imageUrl: \"assets/images/john.png\",\r\n  //     package: '15LPA',\r\n  //   },\r\n  //   {\r\n  //     id: 1239,\r\n  //     name: \"Chidurala Divya\",\r\n  //     gender: 'Female',\r\n  //     contactPreference: 'Phone',\r\n  //     email: \"divyachidurala@softpath.net\",\r\n  //     phoneNumber: 8965413879,\r\n  //     // DOB: new Date(3/25/1974),\r\n  //     DOB:\"10/25/1988\",\r\n  //     position: 'Jr Developer',\r\n  //     // isActive: false,\r\n  //     imageUrl: \"assets/images/mary.png\",\r\n  //     package: '15LPA',\r\n  //   },\r\n  // ];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MethodsService {\r\n\r\n  constructor(protected http: HttpClient) { }\r\n\r\n  url = \"http://localhost:3000/details\";\r\n\r\n  getContacts() {\r\n\r\n    let httpHeaders=new HttpHeaders({\r\n    'Content-Type':'application/json',\r\n    'Authorization':'ContactDetails'\r\n  });\r\n\r\n    return this.http.get(this.url,{headers:httpHeaders});\r\n  }\r\n\r\n/**POST  */\r\n  postDetails(data: any) {\r\n    return this.http.post(this.url, data)\r\n  }\r\n\r\n/**PUT Method Code */\r\n\r\n  // updateContact(detailsId, updateBody) {\r\n  //   const endURL = \"http://localhost:3000/details/\" + detailsId;\r\n  //   return this.http.put(endURL, updateBody);\r\n  // }\r\n\r\n/**Delete Method */\r\n   // deleteContact(detailsId) {\r\n  //   const endURL = \"http://localhost:3000/details/\" + detailsId;\r\n  //   return this.http.put(endURL);\r\n  // }\r\n\r\n\r\n\r\n  // createContact(resourse){\r\n  //   return this.httpClient.post('http://localhost:3000/details',resourse);\r\n  // }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ContactsService } from 'src/services/contacts.service';\r\nimport {HttpClient,HttpHeaders,HttpParams} from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-contacts',\r\n  templateUrl: './contacts.component.html',\r\n  styleUrls: ['./contacts.component.scss']\r\n})\r\nexport class ContactsComponent implements OnInit {\r\n\r\n  constructor(protected contactsService:ContactsService) { }\r\n\r\n  contactList:any;\r\n  // createpage:any;\r\n  // constructor(){}\r\n\r\n  ngOnInit(): void {\r\n  this.contactList=this.contactsService.getcontacts();\r\n  }\r\n}\r\n","<!-- <p >contacts works!</p> -->\r\n\r\n<h2>Contact Lists</h2>\r\n<h3>Calling values through services and declared varibles in the component</h3>\r\n\r\n<!-- <ul>\r\n    <li class=\"gen\" *ngFor=\"let contact of contactList\">\r\n        {{contact.contactMail}}\r\n    </li>\r\n</ul> -->\r\n<!-- <div *ngFor=\" let contact of contactList \">\r\n    {{contact.contactName}}\r\n</div> -->\r\n\r\n<table class=\"table table-light\">\r\n    <thead>\r\n        <tr>\r\n            <th scope=\"col\">contactId</th>\r\n            <th scope=\"col\">contactName</th>\r\n            <th scope=\"col\">contactmail</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr scope=\"row\" *ngFor=\"let contact of contactList\">\r\n            <td scope=\"row\">{{contact.contactId}}</td>\r\n            <td scope=\"row\">{{contact.contactName}}</td>\r\n            <td scope=\"row\">{{contact.contactMail}}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- <button (click)= \"callingFromTemplate() \">Calling from Template Directly</button> -->","import { Injectable } from '@angular/core';\r\nimport{HttpClient,HttpHeaders,HttpParams} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactsService {\r\n  constructor() { }\r\n\r\n  getcontacts(){\r\n\r\n  const contactList=[\r\n      {contactId:1,contactName:'Vinay',contactMail:\"vijay1021.gummadi@gmail.com\"},\r\n      {contactId:2,contactName:'Vijay',contactMail:\"vijay1021.gummadi@gmail.com\"},\r\n      {contactId:3,contactName:'Sanjay',contactMail:\"vijay1021.gummadi@gmail.com\"},\r\n      {contactId:4,contactName:'Pranay',contactMail:\"vijay1021.gummadi@gmail.com\"},\r\n      {contactId:5,contactName:'Anay',contactMail:\"vijay1021.gummadi@gmail.com\"},\r\n];\r\n  return contactList;\r\n  }\r\n\r\n  callingFromTemplate(){\r\n    console.log(\"Calling from template directly\");\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n@Component({\r\n  selector: 'app-corporate',\r\n  templateUrl: './corporate.component.html',\r\n  styleUrls: ['./corporate.component.scss']\r\n})\r\n\r\nexport class CorporateComponent implements OnInit {\r\n\r\n  selectedvalue: string | undefined;\r\n\r\n  disableSelect = new FormControl(false);\r\n\r\n  constructor(private snackBar:MatSnackBar) { }\r\n\r\n\r\n  openScackBar(message:any,action:any){\r\n\r\nthis.snackBar.open(message,action);\r\n  }\r\n  ngOnInit(): void { }\r\n\r\n  Courses: string[] = ['FrontEnd', 'BackEnd', 'WeekEnd'];\r\n\r\n  // types = [\r\n  //   { name: 'C#' },\r\n  //   { name: 'Java' },\r\n  //   { name: 'SQL' },\r\n  //   { name: 'MongoDB' }\r\n  // ];\r\n\r\n  // displayData(subject:any){\r\n  //   return subject ? subject.name:undefined;\r\n  // }\r\n\r\n}\r\n","<!-- <mat-form-field>\r\n  <mat-label>Topics</mat-label>\r\n  <mat-select [(value)]=\"selectedvalue\">\r\n  <mat-option  value=\"frontend\">FrontEnd😀</mat-option>\r\n  <mat-option value=\"backend\">BackEnd😀</mat-option>\r\n  <mat-option value=\"weekend\">WeekEnd😀</mat-option>\r\n</mat-select>\r\n</mat-form-field>\r\n\r\n{{selectedvalue}}is selected -->\r\n\r\n\r\n\r\n<!-- <form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n    <mat-label>Number</mat-label>\r\n    <input type=\"text\"\r\n           placeholder=\"Pick one\"\r\n           aria-label=\"Number\"\r\n           matInput\r\n           [formControl]=\"myControl\"\r\n           [matAutocomplete]=\"auto\">\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of options\" [value]=\"option\">\r\n        {{option}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form> -->\r\n\r\n<!-- <form>\r\n  <mat-form-field>\r\n    <input type=\"text\" matInput [matAutocomplete]=\"auto\" FormControl=\"myControl\"/>\r\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayData\">\r\n      <mat-option *ngFor=\"let course of types\" [value]=\"course\">\r\n        {{course.name}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form> -->\r\n<!-- <h1>WeekEnd😀 Enjoy Kharo bhayya..Eppudu panenaaaa neeeee pilla bachha nayalllaaaaa</h1> -->\r\n\r\n<!-- <mat-checkbox>\r\n  subscribe\r\n</mat-checkbox><br/>\r\n\r\n<mat-checkbox labelPosition=\"before\">\r\n  subscribe\r\n</mat-checkbox><br/>\r\n\r\n<mat-checkbox color=\"primary\">\r\n  subscribe\r\n</mat-checkbox>\r\n<mat-checkbox color=\"accent\">\r\n  subscribe\r\n</mat-checkbox>\r\n\r\n<hr>\r\n<mat-radio-group >\r\n  <mat-radio-button value=\"fronted\" color=\"warn\">FrontEnd</mat-radio-button>\r\n  <mat-radio-button value=\"backend\" color=\"primary\">BackEnd</mat-radio-button>\r\n  <mat-radio-button value=\"weekend\" color=\"accent\">WeekEnd</mat-radio-button>\r\n</mat-radio-group><br>\r\n<div>\r\n<mat-radio-button value=\"fronted\">FrontEnd</mat-radio-button>\r\n</div> -->\r\n\r\n<button mat-button (click)=\"openScackBar('Item deleted','Dismiss')\" class=\"btn btn-success\">ShowSnackBar</button>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pagenotfound',\r\n  templateUrl: './pagenotfound.component.html',\r\n  styleUrls: ['./pagenotfound.component.scss']\r\n})\r\nexport class PagenotfoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n}\r\n","<h2>pagenotfound. This is the not page what you are looking</h2>\r\n\r\n<!-- <div class=\"w-full h-full bg-pattern\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n  <div @fadeInUp class=\"card overflow-auto w-full max-w-2xl\">\r\n      <div class=\"p-6 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n          <div class=\"fill-current text-center\">\r\n              <img class=\"w-32\" src=\"assets/media/logos/Optevus_Blue_Logo.jpg\">\r\n          </div>\r\n      </div>\r\n\r\n      <div class=\"text-center mt-4\">\r\n          <h2 class=\"title m-0\">Register for an account</h2>\r\n          <h4 class=\"body-2 text-secondary m-0\">Simply fill out the form below</h4>\r\n          <div fxLayout=\"row\" class=\"text-center mt-3\" fxLayoutAlign=\"center center\">\r\n              <div class=\"radio\">\r\n                  <input type=\"radio\" color=\"primary\" id=\"inlineRadio1\" value=\"Client\" [checked]=\"'Client' == registrationForm.value.userType\" (click)=\"onSelectRadioType('Client')\" class=\"cursor-pointer\">\r\n                  <span (click)=\"onSelectRadioType('Client')\"></span>\r\n                  <mat-label class=\"form-check-label m-3 cursor-pointer\" for=\"inlineRadio1\" (click)=\"onSelectRadioType('Client')\">Client</mat-label>\r\n              </div>\r\n              <div class=\"radio\">\r\n                  <input type=\"radio\" color=\"primary\" id=\"inlineRadio2\" value=\"Applicant\" [checked]=\"'Applicant' == registrationForm.value.userType\" (click)=\"onSelectRadioType('Applicant')\" class=\"cursor-pointer\">\r\n                  <span (click)=\"onSelectRadioType('Applicant')\"></span>\r\n                  <mat-label class=\"form-check-label m-3 cursor-pointer\" for=\"inlineRadio2\" (click)=\"onSelectRadioType('Applicant')\">Applicant</mat-label>\r\n              </div>\r\n              <div style=\"font-weight: bolder;color: #5b5bf5;\">\r\n                  <span *ngIf=\"'Applicant' == registrationForm.value.userType && !enableStep2\">Step 1 of 2</span>\r\n                  <span *ngIf=\"'Applicant' == registrationForm.value.userType && enableStep2\">Step 2 of 2</span>\r\n              </div>\r\n          </div>\r\n           <div style=\"font-weight: bolder;color: #5b5bf5;\" *ngIf=\"'Applicant' == registrationForm.value.userType\">\r\n      <span *ngIf=\"'Applicant' == registrationForm.value.userType && !enableStep2\">Step 1 of 2</span>\r\n      <span *ngIf=\"'Applicant' == registrationForm.value.userType && enableStep2\">Step 2 of 2</span>\r\n    </div> -->\r\n<!--\r\n      </div>\r\n      <form [formGroup]=\"registrationForm\" fxLayout=\"column\">\r\n\r\n          <div class=\"px-gutter py-4\" gdColumns=\"1fr 1fr\" gdColumns.sm=\"1fr\" gdColumns.xs=\"1fr\" gdGap=\"16px\">\r\n          <div class=\"px-gutter py-4\" fxLayout=\"row\" fxLayout.sm=\"column\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-between start\" fxLayoutAlign.sm=\"start start\" fxLayoutAlign.xs=\"start start\" fxLayoutGap=\"16px\" *ngIf=\"!enableStep2\">\r\n              <div fxFlex=\"50\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" fxLayout=\"column\" fxLayoutAlign=\"start start\" class=\"w-full\">\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>First name </mat-label>\r\n                          <input formControlName=\"firstName\" matInput required maxlength=\"75\">\r\n                          <mat-error *ngIf=\"registrationForm.get('firstName').hasError('required')\">Firstname is required\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('firstName').hasError('minlength')\">Firstname should have at least 1 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('firstName').hasError('maxLength')\">Firstname should have maximum 75 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('firstName').hasError('pattern')\">First name should have only alphabets\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Preferred timezone</mat-label>\r\n                          <input formControlName=\"userTimezoneValue\" matInput [matAutocomplete]=\"auto1\" required (keyup)=\"timezoneFilter($event)\">\r\n                          <mat-autocomplete (optionSelected)=\"timezoneSelected($event)\" #auto1=\"matAutocomplete\">\r\n                              <mat-option *ngFor=\"let timeZoneObj of filteredTimezone\" [value]=\"timeZoneObj.id\" matTooltip=\"{{timeZoneObj.timeZoneName }} ({{timeZoneObj.timeZone}})\" [ngStyle]=\"{'background-color':timeZoneObj.islinked ? 'rgb(200 246 200)' : '' }\">\r\n                                  {{timeZoneObj.timeZoneName }} ({{timeZoneObj.timeZone}})\r\n                              </mat-option>\r\n                          </mat-autocomplete>\r\n                          <mat-error *ngIf=\"registrationForm.get('userTimezoneValue').hasError('required')\">Preferred timezone is required\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>E-Mail</mat-label>\r\n                          <input formControlName=\"email\" matInput required autocomplete=\"off\" maxlength=\"255\">\r\n                          <mat-error *ngIf=\"registrationForm.get('email').hasError('required')\">Email is required</mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('email').hasError('minlength')\">Email should have at least 3 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('email').hasError('maxLength')\">Email should have maximum 255 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('email').hasError('email')\">Email is invalid\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('email').hasError('pattern')\">Email should have only letters (a-z), numbers (0-9), and periods (.) are allowed.</mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Recovery E-Mail</mat-label>\r\n                          <input formControlName=\"recoveryEmail\" (keyup)=\"recoveryEmailChange($event)\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$\" maxlength=\"255\" matInput autocomplete=\"off\">\r\n                          <mat-error *ngIf=\"registrationForm.get('recoveryEmail').hasError('pattern')\">Email is invalid\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('recoveryEmail').hasError('required')\">Email is required\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <mat-error *ngIf=\"registrationForm.value.email != '' && registrationForm.value.email != null && registrationForm.value.email != undefined &&\r\n              registrationForm.value.recoveryEmail == registrationForm.value.email\">Email and Recovery Email cannot be same\r\n                  </mat-error>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"isRecoveryEmail\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Recovery Question</mat-label>\r\n                          <mat-select formControlName=\"recoveryQuestionId\" [required]=\"isRecoveryEmail\">\r\n                              <mat-option *ngFor=\"let question of recoveryQuestions\" [value]=\"question.key\">\r\n                                  {{question.value}}\r\n                              </mat-option>\r\n                          </mat-select>\r\n                          <mat-error *ngIf=\"registrationForm.get('recoveryQuestionId').hasError('required')\">Recovery Question is required\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"isRecoveryEmail\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Recovery Answer</mat-label>\r\n                          <input formControlName=\"recoveryAnswer\" matInput [required]=\"isRecoveryEmail\" autocomplete=\"off\">\r\n                          <mat-error *ngIf=\"registrationForm.get('recoveryAnswer').hasError('required')\">Recovery Answer is required\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" [ngClass]=\"{ 'mb-custom2' : (passwordContainsError() == true && passwordOnlyRequired() == false),\r\n          'mb-custom1' : ((passwordContainsError() == false && passwordOnlyRequired() == true) || (passwordContainsError() == false && passwordOnlyRequired() == false))}\">\r\n                      style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Password</mat-label>\r\n                          <input [type]=\"inputType\" formControlName=\"password\" matInput required autocomplete=\"new-password\">\r\n                          <button (click)=\"toggleVisibility()\" mat-icon-button matSuffix matTooltip=\"Toggle Visibility\" type=\"button\">\r\n              <mat-icon *ngIf=\"visible\" [icIcon]=\"icVisibility\"></mat-icon>\r\n              <mat-icon *ngIf=\"!visible\" [icIcon]=\"icVisibilityOff\"></mat-icon>\r\n            </button>\r\n                          <mat-hint>Click the eye to toggle visibility</mat-hint>\r\n                          <mat-error *ngIf=\"registrationForm.get('password').hasError('required') || registrationForm.get('password').hasError('minlength') ||\r\n              registrationForm.get('password').hasError('maxLength') || registrationForm.get('password').hasError('pattern')\">\r\n                              <span *ngIf=\"registrationForm.get('password').hasError('required')\">Password is required</span>\r\n                              <span *ngIf=\"registrationForm.get('password').hasError('minlength')\">Password should have at least 8\r\n                symbols\r\n              </span>\r\n                              <span *ngIf=\"registrationForm.get('password').hasError('maxLength')\">Password should have maximum 100\r\n                symbols\r\n              </span>\r\n                              <span *ngIf=\"registrationForm.get('password').hasError('pattern')\">Password should contain at least one\r\n                digit, at\r\n                least one upper case alphabet, at least one lower case alphabet, at least one special character,\r\n                doesn’t\r\n                contain any\r\n                white space\r\n              </span>\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n\r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"16px\" class=\"w-full\" *ngIf=\"!enableStep2\">\r\n\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Last name</mat-label>\r\n                          <input formControlName=\"lastName\" matInput required maxlength=\"75\">\r\n                          <mat-error *ngIf=\"registrationForm.get('lastName').hasError('required')\">Lastname is required</mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('lastName').hasError('minlength')\">Lastname should have at least 1 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('lastName').hasError('maxLength')\">LastName should have maximum 75 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('lastName').hasError('pattern')\">Last name should have only alphabets\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n\r\n\r\n\r\n\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Dialing code</mat-label>\r\n                          <input type=\"text\" placeholder=\"Country\" aria-label=\"Number\" matInput (keyup)=\"countryFilter($event)\" formControlName=\"dialingCodeValue\" [matAutocomplete]=\"auto\" required>\r\n                          <mat-autocomplete (optionSelected)=\"countrySelected($event)\" #auto=\"matAutocomplete\">\r\n                              <mat-option *ngFor=\"let country of filteredCountry\" [value]=\"country.id\" [ngStyle]=\"{'background-color':country.islinked ? 'rgb(200 246 200)' : '' }\">\r\n                                  {{country.name}} (+{{country.phonecode}})\r\n                              </mat-option>\r\n                          </mat-autocomplete>\r\n                          <mat-error *ngIf=\"registrationForm.get('dialingCodeValue').hasError('required')\">Dialing code is required\r\n                          </mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Mobile number</mat-label>\r\n                          <input formControlName=\"phoneNumber\" matInput required (keypress)=\"numberOnly($event)\">\r\n                          <mat-error *ngIf=\"registrationForm.get('phoneNumber').hasError('required')\">Mobile number is required\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('phoneNumber').hasError('minlength')\">Mobile number should have at least 10 digits</mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('phoneNumber').hasError('maxlength')\">Mobile number should not be more than 15 digits</mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <mat-checkbox color=\"primary\" formControlName=\"sendMobileNotification\" style=\"margin-top:15px\">\r\n                          <span class=\"role-feature-name\">Allow sending SMS alerts and notifications</span>\r\n                      </mat-checkbox>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"isRecoveryEmail\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Password (Confirm)</mat-label>\r\n                          <input [type]=\"inputType\" formControlName=\"cPassword\" matInput required>\r\n                          <button (click)=\"toggleVisibility()\" mat-icon-button matSuffix matTooltip=\"Toggle Visibility\" type=\"button\">\r\n              <mat-icon *ngIf=\"visible\" [icIcon]=\"icVisibility\"></mat-icon>\r\n              <mat-icon *ngIf=\"!visible\" [icIcon]=\"icVisibilityOff\"></mat-icon>\r\n            </button>\r\n                          <mat-hint>Please repeat your password from above</mat-hint>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('required')\">Confirm password is required\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('minlength')\">Confirm password should have at least 8 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('maxLength')\">Confirm password should have maximum 100 symbols\r\n                          </mat-error>\r\n                          <mat-error class=\"mt-3\" *ngIf=\"registrationForm.get('cPassword').errors &&registrationForm.get('cPassword').errors.ConfirmPassword\">\r\n                              'Password' and 'Confirm password' didn't match.</mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <div class=\"py-3 w-full\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"!isRecoveryEmail\" style=\"margin-bottom: 16px;\">\r\n                      <mat-form-field fxFlex=\"grow\">\r\n                          <mat-label>Password (Confirm)</mat-label>\r\n                          <input [type]=\"confirmPasswordInputType\" formControlName=\"cPassword\" matInput required>\r\n                          <button (click)=\"confirmPasswordToggleVisibility()\" mat-icon-button matSuffix matTooltip=\"Toggle Visibility\" type=\"button\">\r\n              <mat-icon *ngIf=\"confirmPasswordVisible\" [icIcon]=\"icVisibility\"></mat-icon>\r\n              <mat-icon *ngIf=\"!confirmPasswordVisible\" [icIcon]=\"icVisibilityOff\"></mat-icon>\r\n            </button>\r\n                          <mat-hint>Please repeat your password from above</mat-hint>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('required')\">Confirm password is required\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('minlength')\">Confirm password should have at least 8 symbols\r\n                          </mat-error>\r\n                          <mat-error *ngIf=\"registrationForm.get('cPassword').hasError('maxLength')\">Confirm password should have maximum 100 symbols\r\n                          </mat-error>\r\n                          <mat-error class=\"mt-3\" *ngIf=\"registrationForm.get('cPassword').errors &&registrationForm.get('cPassword').errors.ConfirmPassword\">\r\n                              'Password' and 'Confirm password' didn't match.</mat-error>\r\n                      </mat-form-field>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n\r\n          <div class=\"px-gutter pb-4\" gdColumns=\"1fr 1fr\" gdColumns.xs=\"1fr\" gdGap=\"16px\">\r\n              <div class=\"py-3\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"registrationForm.controls['userType'].value == 'Client'\">\r\n                  <mat-form-field fxFlex=\"grow\">\r\n                      <mat-label>Organization name</mat-label>\r\n                      <input formControlName=\"organisationName\" matInput required pattern=\"^[a-zA-Z0-9\\s]{0,100}$\" maxlength=\"100\">\r\n                      <mat-error *ngIf=\"registrationForm.get('organisationName').hasError('required')\">Organization name is required\r\n                      </mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('organisationName').hasError('minlength')\">Organization name should have at least 3 symbols</mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('organisationName').hasError('pattern')\">Organization name is invalid</mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('organisationName').hasError('maxLength')\">Organization name should have maximum 100 symbols</mat-error>\r\n                  </mat-form-field>\r\n              </div>\r\n              <div class=\"py-3\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"'Client' == registrationForm.value.userType\">\r\n                  <mat-form-field fxFlex=\"grow\">\r\n                      <mat-label>Registration Key</mat-label>\r\n                      <input formControlName=\"adminCode\" matInput required (keypress)=\"notSpace($event)\" maxlength=\"15\">\r\n                      <mat-error *ngIf=\"registrationForm.get('adminCode').hasError('required')\">Registration Key is required\r\n                      </mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('adminCode').hasError('minlength')\">Registration Key should have at least 5 symbols\r\n                      </mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('adminCode').hasError('maxLength')\">Registration Key should have maximum 15 symbols\r\n                      </mat-error>\r\n                  </mat-form-field>\r\n              </div>\r\n              <div class=\"py-3\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"enableStep2 && 'Applicant' == registrationForm.value.userType\">\r\n                  <mat-form-field fxFlex=\"grow\">\r\n                      <mat-label>Registration Key</mat-label>\r\n                      <input formControlName=\"applicantCode\" matInput required (keypress)=\"notSpace($event)\" maxlength=\"15\">\r\n                      <mat-error *ngIf=\"registrationForm.get('applicantCode').hasError('required')\">Registration Key is required\r\n                      </mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('applicantCode').hasError('minlength')\">Registration Key should have at least 5 symbols\r\n                      </mat-error>\r\n                      <mat-error *ngIf=\"registrationForm.get('applicantCode').hasError('maxLength')\">Registration Key should have maximum 15 symbols\r\n                      </mat-error>\r\n                  </mat-form-field>\r\n              </div>\r\n          </div>\r\n          <div class=\"px-gutter\" gdColumns=\"1fr 1fr\" gdColumns.xs=\"1fr\" gdGap=\"16px\">\r\n              <div class=\"py-3\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"!enableStep2 && 'Client' == registrationForm.value.userType\">\r\n                  <mat-checkbox color=\"primary\" formControlName=\"agree\" class=\"caption\">I agree to the</mat-checkbox>\r\n                  <a (click)=\"goToTerms()\" class=\"ml-1 cursor-pointer\" style=\"color: #5c77ff;font-weight: 800;\"><b>\r\n            terms and conditions</b>.</a>\r\n              </div>\r\n\r\n              <div class=\"py-3\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"enableStep2 && 'Applicant' == registrationForm.value.userType\">\r\n                  <mat-checkbox color=\"primary\" formControlName=\"agree\" class=\"caption\">I agree to the</mat-checkbox>\r\n                  <a (click)=\"goToTerms()\" class=\"ml-1 cursor-pointer\" style=\"color: #5c77ff;font-weight: 800;\"><b>\r\n            terms and conditions</b>.</a>\r\n              </div>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"mb-5\" *ngIf=\"'Client' == registrationForm.value.userType\">\r\n\r\n              <button type=\"submit\" class=\"mt-3 mb-5\" color=\"primary\" mat-raised-button type=\"button\" id=\"kt_login_signup_submit\" (click)=\"submit()\" [disabled]=\"(registrationForm.invalid || registrationForm.value.recoveryEmail == registrationForm.value.email\r\n      || !registrationForm.controls['agree'].value || isAnyoperationsInprogress) || enableSubmitButton\">\r\n        SIGN UP\r\n      </button>\r\n\r\n              <p class=\"text-secondary text-center\">\r\n                  Already have an account?<br />\r\n                  <a style=\"color: #5c77ff;font-weight: 800;cursor: pointer;\" (click)=\"goToLoginScreen()\">Sign in here</a>\r\n              </p>\r\n\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"mb-5 pr-5\" *ngIf=\"'Applicant' == registrationForm.value.userType\">\r\n              <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center;\" class=\"mb-5 pr-5 ml-5\" *ngIf=\"enableStep2\" style=\"width: 100%;\">\r\n                  <a style=\"color: #5c77ff;font-weight: 800;cursor: pointer;margin-top: 20px !important;\r\n      margin-left: 5px !important;\" (click)=\"backToStep1()\" fxLayoutAlign=\"center start\">Back</a>\r\n                  <button type=\"submit\" class=\"mt-3 mb-5\" color=\"primary\" mat-raised-button type=\"button\" *ngIf=\"enableStep2\" id=\"kt_login_signup_submit\" (click)=\"submit()\" [disabled]=\"(registrationForm.invalid || registrationForm.value.recoveryEmail == registrationForm.value.email\r\n        || !registrationForm.controls['agree'].value || isAnyoperationsInprogress) || enableSubmitButton\" fxLayoutAlign=\"center end\">\r\n        SIGN UP\r\n      </button>\r\n              </div>\r\n              <div *ngIf=\"!enableStep2 && 'Applicant' == registrationForm.value.userType\" class=\"ml-8\">\r\n                  <i class=\"fa fa-info-circle\"></i>\r\n                  <span style=\"font-size: 12px;margin-left: 8px !important;\"> Once you click on next then you will receive registration key to the mentioned email </span>\r\n              </div>\r\n              <button type=\"submit\" class=\"mt-3 mb-5\" color=\"primary\" mat-raised-button type=\"button\" *ngIf=\"!enableStep2 && 'Applicant' == registrationForm.value.userType\" id=\"kt_login_signup_submit\" (click)=\"sendApplicantRegistrationKey()\" [disabled]=\"(registrationForm.invalid || registrationForm.value.recoveryEmail == registrationForm.value.email)\">\r\n        Next\r\n      </button>\r\n\r\n          </div>\r\n          <div fxLayout=\"row\" class=\"mb-5 pr-5\" fxLayoutAlign=\"center center\" *ngIf=\"'Applicant' == registrationForm.value.userType\">\r\n              <p class=\"text-secondary text-center\">\r\n                  Already have an account?<br />\r\n                  <a style=\"color: #5c77ff;font-weight: 800;cursor: pointer;\" (click)=\"goToLoginScreen()\">Sign in here</a>\r\n              </p>\r\n          </div>\r\n      </form>\r\n  </div>\r\n</div>  -->\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-template',\r\n  templateUrl: './template.component.html',\r\n  styleUrls: ['./template.component.scss']\r\n})\r\nexport class TemplateComponent implements OnInit {\r\n\r\n  firstname: any;\r\n  terms: boolean = false;\r\n  list: string = '';\r\n  address: string = '';\r\n\r\n  // datatypes:types=new this.datatypes();\r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  addDetails(formValue: NgForm) {\r\n    console.log(formValue.value);\r\n  }\r\n\r\n  resetData(formValue: NgForm) {\r\n    // formValue.reset();\r\n    formValue.resetForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n","<!-- <form #dataForm=\"ngForm\" (submit)=\"addDetails(dataForm)\">\r\n    <input type=\"text\" name=\"firstname\" [(ngModel)]=\"firstname\" required>\r\n    <br/>\r\n\r\n    <select typ=\"list\" [(ngModel)]=\"list\" name=\"type\" required>\r\n      <option value=\"1\">FrontEnd</option>\r\n      <option value=\"2\">BackEnd</option>\r\n      <option value=\"3\">FullStack</option>\r\n    </select><br/>\r\n\r\n    <textarea name=\"adderess\" [(ngModel)]=\"address\" required></textarea><br/>\r\n    <input type=\"checkbox\" name=\"terms\" [(ngModel)]=\"terms\" required>Accept Terms&conditions<br/>\r\n    <button type=\"submit\" class=\"btn btn-primary mt-2\" [disabled]=\"!dataForm.valid\">Submit</button>\r\n    <button type=\"reset\" class=\"btn btn-link mt-2\" (click)=\"resetData(dataForm)\"> Reset</button>\r\n</form>\r\n<hr> -->\r\n\r\n<!-- <mat-toolbar color=\"primary\" class=\"navbar\">\r\n    <div>Code Resolution</div>\r\n    <div>\r\n        <span>Home</span>\r\n        <span>About</span>\r\n        <span>Services</span>\r\n    </div>\r\n</mat-toolbar> -->\r\n\r\n<mat-sidenav-container>\r\n  <mat-sidenav>Sidenav</mat-sidenav>\r\n<mat-sidenav-content>Main</mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n\r\n\r\n","import { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthorizeComponent } from './authorize/authorize.component';\r\nimport { ChandruComponent } from './chandru/chandru.component';\r\nimport { ContactsComponent } from './contacts/contacts.component';\r\nimport { CorporateComponent } from './corporate/corporate.component';\r\nimport { TodoComponent } from './todo/todo.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { PagenotfoundComponent } from './pagenotfound/pagenotfound.component';\r\nimport { ReactiveformComponent } from './reactiveform/reactiveform.component';\r\nimport { ListEmployeeComponent } from './list-employee/list-employee.component';\r\nimport { ImplementingComponent } from './implementing/implementing.component';\r\nimport { TemplateComponent } from './template/template.component';\r\nimport { ArcreactComponent } from './arcreact/arcreact.component';\r\nimport { MaterialsComponent } from './materials/materials.component';\r\nimport { MaterialsModule } from './materials/materials.module';\r\nimport { MethodsComponent } from './methods/methods.component';\r\nimport { OfflineComponent } from './offline/offline.component';\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  {path:'methods',component:MethodsComponent},\r\n  {path:'authorize',component:AuthorizeComponent},\r\n  {path:'pagenotfound',component:PagenotfoundComponent},\r\n  {path:'login',component:LoginComponent},\r\n  {path:'contacts',component:ContactsComponent},\r\n  {path:'chandru',component:ChandruComponent},\r\n  {path:'corporate',component:CorporateComponent},\r\n  {path:'todo',component:TodoComponent},\r\n  {path:'Reactiveform',component:ReactiveformComponent},\r\n  {path:'listemployee',component:ListEmployeeComponent},\r\n  {path:'implements',component:ImplementingComponent},\r\n  {path:'template',component:TemplateComponent},\r\n  {path:'arcreact',component:ArcreactComponent},\r\n  {path:'materials',component:MaterialsComponent},\r\n  {path:'offline',component:OfflineComponent },\r\n\r\n\r\n\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule,MaterialsModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Tile } from '@angular/material/grid-list/tile-coordinator';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  opened=false //This is one way to implement toggle in Open and  Close\r\n\r\n  log(state:any)\r\n  {\r\n   console.log(state);\r\n  }\r\n\r\n  constructor() {}\r\n  typesOfShoes: string[] = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n  \r\n  }\r\n\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}